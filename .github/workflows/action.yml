name: CI Dev

on:
  push:
    branches:
      - dev

jobs:
  source-scan:
    name: SonaCloud Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      #   with:
      #     fetch-depth: 0
      # - name: SonarCloud Scan
      #   uses: nguyenthangg/music-app@main
      #   env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
      #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN}}

  Run-unit-test:
      runs-on: ubuntu-latest
      needs: source-scan
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2


  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: source-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/dev'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-west-2  # Change to your desired region
      
      # - name: Configure AWS credentials for dev branch
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
      #     aws-region: us-west-2  # Change to your desired region
      
      # - name: Configure AWS credentials for staging branch
      #   if: github.ref == 'refs/heads/staging'  # Add this condition for staging branch
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
      #     aws-region: us-west-2  # Change to your desired region
      
      # - name: Zip Lambda files
      #   run: |
      #       mkdir -p terraform/lambda/lambda
      #       zip -r terraform/lambda/lambda/lambda_zip.zip lambda_function.py module_post.py module_delete_link.py bin pytube pytube-15.0.0.dist-info
      #   working-directory: terraform    

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      # - name: Build docker image -> docker hub
      #   run: |

  push-image-to-docker-hub:
        needs: source-scan
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v3
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3
          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
          - name: Build and Push Docker Image
            uses: docker/build-push-action@v5
            # with:
            #   context: . main
            #   file: . /main/Dockerfile # Update this path if needed
            #    # Update this path if needed
            #   push: true
            #   tags: thang14112005/music-app:latest  # Update Docker Hub repository and tags

  setup-EC-2-with-docker-images-app:
        needs: deploy-infrastructure
        runs-on: ubutu-latest
        steps:
          - uses: actions/checkout@v3
          - name: Set up Python 3.9.16
            uses: actions/setup-python@v3
            with:
              python-version: "3.9.16"
          - name: Install dependencies
            run: |
              ssh -i "ssh_key_aws" ubuntu@${{ secrets.EC2_PUBLIC_IP }}.us-west-2.compute.amazonaws.com
                #run commands
                sudo apt-get update
                sudo apt-get install -y nginx
                sudo systemctl start nginx
                sudo systemctl enable nginx
                echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
                docker pull thang14112005/music-app:latest
                docker run -d -p 8051:80 thang14112005/music-app:latest

