name: CI Dev
on:
  push:
    branches:
      - dev

jobs:
  source-scan:
    name: SonaCloud Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      #   with:
      #     fetch-depth: 0
      # - name: SonarCloud Scan
      #   uses: nguyenthangg/music-app@main
      #   env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
      #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN}}

  Run-unit-test:
      runs-on: ubuntu-latest
      needs: source-scan
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2


  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: ["source-scan","Run-unit-test"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/dev'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-west-2  # Change to your desired region
    
      # - name: Zip Lambda files
      #   run: |
      #       mkdir -p terraform/lambda/lambda
      #       zip -r terraform/lambda/lambda/lambda_zip.zip lambda_function.py module_post.py module_delete_link.py bin pytube pytube-15.0.0.dist-info
      #   working-directory: terraform    

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
      - name: Get Terraform Output
        id: terraform_output
        run: |
          # Run the `terraform output` command to get the value of a specific output variable.
          output_value=$(terraform output repository_url)

          # Set the output variable to be used in subsequent steps.
          echo "::set-output name=output::${output_value}"

      - name: Print Terraform Output as Variable
        run: echo "TERRAFORM_OUTPUT=${{ steps.terraform_output.outputs.output }}" >> $GITHUB_ENV

      - name: Use Terraform Output
        run: echo "The Terraform output is $TERRAFORM_OUTPUT"
  build-image:
    runs-on: ubuntu-latest
    needs: ["source-scan","Run-unit-test"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r main/requirements.txt

      - name: Build Docker image
        run: docker build -t streamlit-app main

  push-image-to-docker-hub:
    needs: ["source-scan","Run-unit-test","build-image"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./main
          # Update this path if needed
          # Update this path if needed
          push: true
          tags: thang14112005/music-app:latest  # Update Docker Hub repository and tags

  push-image-to-ecr:
    name: 'push-image-to-ecr'
    needs: ["source-scan","Run-unit-test","build-image","deploy-infrastructure"]
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Call terraform repository_url
        run: |
          echo "The Terraform output is $TERRAFORM_OUTPUT"

  k6 test:
      needs: ["source-scan","Run-unit-test","build-image","deploy-infrastructure","push-image-to-ecr"]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Run k6 local test
          uses: grafana/k6-action@v0.3.1
          with:
            filename: test.js
        